type Bond @entity {
  """ ID transaction hash """
  id: ID!
  owner: Bytes!
  amount: BigInt!
  poolId: Bytes!
  nonce: BigInt!
  slashedAtStart: BigInt!
  timestamp: Int!
}

type Slash @entity {
  """ ID transaction hash """
  id: ID!
  poolId: Bytes!
  newSlashPts: BigInt!
  timestamp: Int!
}

type UnbondRequest @entity {
  """ ID transaction hash """
  id: ID!
  owner: Bytes!
  bondId: Bytes!
  willUnlock: BigInt!
  timestamp: Int!
}

type Unbonded @entity {
  """ ID transaction hash """
  id: ID!
  owner: Bytes!
  bondId: Bytes!
  timestamp: Int!
}

type Channel @entity {
  """transaction id"""
  id: ID!
  creator: Bytes!
  channelId: Bytes!
  tokenAddr: Bytes!
  tokenAmount: BigInt!
  validUntil: BigInt!
  validators: [Bytes!]!
  spec: String!
  created: Int!
}

type ChannelWithdrawExpired @entity {
  """" transaction hash """
  id: ID!
  channelId: Bytes!
  amount: BigInt!
  timestamp: Int!
}

type ChannelWithdraw @entity {
  """" transaction hash """
  id: ID!
  channelId: Bytes!
  amount: BigInt!
  timestamp: Int!
}

type Identity @entity {
  """ id """
  id: ID!
  timestamp: Int!
  privilege: [IdentityPrivilege!]! @derivedFrom(field: "identity")
  routine: [IdentityRoutine!]! @derivedFrom(field: "identity")
}

type IdentityPrivilege @entity {
  """ id """
  id: ID!
  identity: Identity!
  address: Bytes!
  level: Int!
  timestamp: Int!
}

type IdentityRoutine @entity {
  """ id """
  id: ID!
  identity: Identity!
  hash: Bytes!
  authorized: Boolean!
  timestamp: Int!
}